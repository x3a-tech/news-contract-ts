// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "indexation/indexation.proto" (package "indexation", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message indexation.Article
 */
export interface Article {
    /**
     * @generated from protobuf field: bytes id = 1;
     */
    id: Uint8Array;
    /**
     * @generated from protobuf field: int32 lang = 2;
     */
    lang: number;
    /**
     * @generated from protobuf field: string value = 3;
     */
    value: string;
}
/**
 * @generated from protobuf message indexation.UpsertArticleResponse
 */
export interface UpsertArticleResponse {
    /**
     * @generated from protobuf field: bool status = 1;
     */
    status: boolean;
}
/**
 * @generated from protobuf message indexation.UpsertArticlesResponse
 */
export interface UpsertArticlesResponse {
    /**
     * @generated from protobuf field: repeated bool status = 1;
     */
    status: boolean[];
}
/**
 * @generated from protobuf message indexation.UpsertArticlesRequest
 */
export interface UpsertArticlesRequest {
    /**
     * @generated from protobuf field: repeated indexation.Article articles = 1;
     */
    articles: Article[];
}
/**
 * @generated from protobuf message indexation.GetArticlesRequest
 */
export interface GetArticlesRequest {
    /**
     * @generated from protobuf field: int32 offset = 1;
     */
    offset: number;
    /**
     * @generated from protobuf field: string query = 2;
     */
    query: string;
}
/**
 * @generated from protobuf message indexation.GetArticlesResponse
 */
export interface GetArticlesResponse {
    /**
     * @generated from protobuf field: repeated bytes ids = 1;
     */
    ids: Uint8Array[];
}
/**
 * @generated from protobuf enum indexation.Method
 */
export enum Method {
    /**
     * @generated from protobuf enum value: NULL = 0;
     */
    NULL = 0,
    /**
     * @generated from protobuf enum value: UPSERT_ARTICLE = 1;
     */
    UPSERT_ARTICLE = 1,
    /**
     * @generated from protobuf enum value: UPSERT_ARTICLES = 2;
     */
    UPSERT_ARTICLES = 2,
    /**
     * @generated from protobuf enum value: GET_ARTICLES = 3;
     */
    GET_ARTICLES = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Article$Type extends MessageType<Article> {
    constructor() {
        super("indexation.Article", [
            { no: 1, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Article>): Article {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = new Uint8Array(0);
        message.lang = 0;
        message.value = "";
        if (value !== undefined)
            reflectionMergePartial<Article>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Article): Article {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes id */ 1:
                    message.id = reader.bytes();
                    break;
                case /* int32 lang */ 2:
                    message.lang = reader.int32();
                    break;
                case /* string value */ 3:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Article, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes id = 1; */
        if (message.id.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.id);
        /* int32 lang = 2; */
        if (message.lang !== 0)
            writer.tag(2, WireType.Varint).int32(message.lang);
        /* string value = 3; */
        if (message.value !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indexation.Article
 */
export const Article = new Article$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertArticleResponse$Type extends MessageType<UpsertArticleResponse> {
    constructor() {
        super("indexation.UpsertArticleResponse", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertArticleResponse>): UpsertArticleResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<UpsertArticleResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertArticleResponse): UpsertArticleResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertArticleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indexation.UpsertArticleResponse
 */
export const UpsertArticleResponse = new UpsertArticleResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertArticlesResponse$Type extends MessageType<UpsertArticlesResponse> {
    constructor() {
        super("indexation.UpsertArticlesResponse", [
            { no: 1, name: "status", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertArticlesResponse>): UpsertArticlesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = [];
        if (value !== undefined)
            reflectionMergePartial<UpsertArticlesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertArticlesResponse): UpsertArticlesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bool status */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.status.push(reader.bool());
                    else
                        message.status.push(reader.bool());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertArticlesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bool status = 1; */
        if (message.status.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.status.length; i++)
                writer.bool(message.status[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indexation.UpsertArticlesResponse
 */
export const UpsertArticlesResponse = new UpsertArticlesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertArticlesRequest$Type extends MessageType<UpsertArticlesRequest> {
    constructor() {
        super("indexation.UpsertArticlesRequest", [
            { no: 1, name: "articles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Article }
        ]);
    }
    create(value?: PartialMessage<UpsertArticlesRequest>): UpsertArticlesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.articles = [];
        if (value !== undefined)
            reflectionMergePartial<UpsertArticlesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertArticlesRequest): UpsertArticlesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated indexation.Article articles */ 1:
                    message.articles.push(Article.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertArticlesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated indexation.Article articles = 1; */
        for (let i = 0; i < message.articles.length; i++)
            Article.internalBinaryWrite(message.articles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indexation.UpsertArticlesRequest
 */
export const UpsertArticlesRequest = new UpsertArticlesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticlesRequest$Type extends MessageType<GetArticlesRequest> {
    constructor() {
        super("indexation.GetArticlesRequest", [
            { no: 1, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticlesRequest>): GetArticlesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.offset = 0;
        message.query = "";
        if (value !== undefined)
            reflectionMergePartial<GetArticlesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticlesRequest): GetArticlesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 offset */ 1:
                    message.offset = reader.int32();
                    break;
                case /* string query */ 2:
                    message.query = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticlesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 offset = 1; */
        if (message.offset !== 0)
            writer.tag(1, WireType.Varint).int32(message.offset);
        /* string query = 2; */
        if (message.query !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.query);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indexation.GetArticlesRequest
 */
export const GetArticlesRequest = new GetArticlesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticlesResponse$Type extends MessageType<GetArticlesResponse> {
    constructor() {
        super("indexation.GetArticlesResponse", [
            { no: 1, name: "ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticlesResponse>): GetArticlesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<GetArticlesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticlesResponse): GetArticlesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes ids */ 1:
                    message.ids.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticlesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes ids = 1; */
        for (let i = 0; i < message.ids.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.ids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message indexation.GetArticlesResponse
 */
export const GetArticlesResponse = new GetArticlesResponse$Type();
/**
 * @generated ServiceType for protobuf service indexation.Indexation
 */
export const Indexation = new ServiceType("indexation.Indexation", [
    { name: "UpsertArticle", options: {}, I: Article, O: UpsertArticleResponse },
    { name: "UpsertArticles", options: {}, I: UpsertArticlesRequest, O: UpsertArticlesResponse },
    { name: "GetArticles", options: {}, I: GetArticlesRequest, O: GetArticlesResponse }
]);
