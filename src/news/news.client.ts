// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "news/news.proto" (package "news", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { News } from "./news";
import type { RemoveFilterParams } from "./news";
import type { UpdateFilterSourcesParams } from "./news";
import type { Empty } from "../google/protobuf/empty";
import type { UpdateFilterParams } from "./news";
import type { CreateFilterFromCategoriesParams } from "./news";
import type { Filter } from "./news";
import type { CreateFilterParams } from "./news";
import type { GetArticlesShortResponse } from "./news";
import type { GetArticlesByFilterParams } from "./news";
import type { GetFiltersShortResponse } from "./news";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetFiltersResponse } from "./news";
import type { GetFiltersParams } from "./news";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service news.News
 */
export interface INewsClient {
    /**
     * @generated from protobuf rpc: GetFilters(news.GetFiltersParams) returns (news.GetFiltersResponse);
     */
    getFilters(input: GetFiltersParams, options?: RpcOptions): UnaryCall<GetFiltersParams, GetFiltersResponse>;
    /**
     * @generated from protobuf rpc: GetFiltersShort(news.GetFiltersParams) returns (news.GetFiltersShortResponse);
     */
    getFiltersShort(input: GetFiltersParams, options?: RpcOptions): UnaryCall<GetFiltersParams, GetFiltersShortResponse>;
    /**
     * @generated from protobuf rpc: GetArticlesByFilter(news.GetArticlesByFilterParams) returns (news.GetArticlesShortResponse);
     */
    getArticlesByFilter(input: GetArticlesByFilterParams, options?: RpcOptions): UnaryCall<GetArticlesByFilterParams, GetArticlesShortResponse>;
    /**
     * @generated from protobuf rpc: CreateFilter(news.CreateFilterParams) returns (news.Filter);
     */
    createFilter(input: CreateFilterParams, options?: RpcOptions): UnaryCall<CreateFilterParams, Filter>;
    /**
     * @generated from protobuf rpc: CreateFilterFromCategories(news.CreateFilterFromCategoriesParams) returns (news.Filter);
     */
    createFilterFromCategories(input: CreateFilterFromCategoriesParams, options?: RpcOptions): UnaryCall<CreateFilterFromCategoriesParams, Filter>;
    /**
     * @generated from protobuf rpc: UpdateFilter(news.UpdateFilterParams) returns (google.protobuf.Empty);
     */
    updateFilter(input: UpdateFilterParams, options?: RpcOptions): UnaryCall<UpdateFilterParams, Empty>;
    /**
     * @generated from protobuf rpc: UpdateFilterSources(news.UpdateFilterSourcesParams) returns (google.protobuf.Empty);
     */
    updateFilterSources(input: UpdateFilterSourcesParams, options?: RpcOptions): UnaryCall<UpdateFilterSourcesParams, Empty>;
    /**
     * @generated from protobuf rpc: RemoveFilter(news.RemoveFilterParams) returns (google.protobuf.Empty);
     */
    removeFilter(input: RemoveFilterParams, options?: RpcOptions): UnaryCall<RemoveFilterParams, Empty>;
}
/**
 * @generated from protobuf service news.News
 */
export class NewsClient implements INewsClient, ServiceInfo {
    typeName = News.typeName;
    methods = News.methods;
    options = News.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetFilters(news.GetFiltersParams) returns (news.GetFiltersResponse);
     */
    getFilters(input: GetFiltersParams, options?: RpcOptions): UnaryCall<GetFiltersParams, GetFiltersResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFiltersParams, GetFiltersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetFiltersShort(news.GetFiltersParams) returns (news.GetFiltersShortResponse);
     */
    getFiltersShort(input: GetFiltersParams, options?: RpcOptions): UnaryCall<GetFiltersParams, GetFiltersShortResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFiltersParams, GetFiltersShortResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetArticlesByFilter(news.GetArticlesByFilterParams) returns (news.GetArticlesShortResponse);
     */
    getArticlesByFilter(input: GetArticlesByFilterParams, options?: RpcOptions): UnaryCall<GetArticlesByFilterParams, GetArticlesShortResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetArticlesByFilterParams, GetArticlesShortResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateFilter(news.CreateFilterParams) returns (news.Filter);
     */
    createFilter(input: CreateFilterParams, options?: RpcOptions): UnaryCall<CreateFilterParams, Filter> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateFilterParams, Filter>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateFilterFromCategories(news.CreateFilterFromCategoriesParams) returns (news.Filter);
     */
    createFilterFromCategories(input: CreateFilterFromCategoriesParams, options?: RpcOptions): UnaryCall<CreateFilterFromCategoriesParams, Filter> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateFilterFromCategoriesParams, Filter>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateFilter(news.UpdateFilterParams) returns (google.protobuf.Empty);
     */
    updateFilter(input: UpdateFilterParams, options?: RpcOptions): UnaryCall<UpdateFilterParams, Empty> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateFilterParams, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateFilterSources(news.UpdateFilterSourcesParams) returns (google.protobuf.Empty);
     */
    updateFilterSources(input: UpdateFilterSourcesParams, options?: RpcOptions): UnaryCall<UpdateFilterSourcesParams, Empty> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateFilterSourcesParams, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RemoveFilter(news.RemoveFilterParams) returns (google.protobuf.Empty);
     */
    removeFilter(input: RemoveFilterParams, options?: RpcOptions): UnaryCall<RemoveFilterParams, Empty> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveFilterParams, Empty>("unary", this._transport, method, opt, input);
    }
}
