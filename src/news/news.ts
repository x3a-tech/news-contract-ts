// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "news/news.proto" (package "news", syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message news.RawSource
 */
export interface RawSource {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: news.SourceType type = 2;
     */
    type: SourceType;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 4;
     */
    slug: string;
    /**
     * @generated from protobuf field: string url = 5;
     */
    url: string;
    /**
     * @generated from protobuf field: int32 lang = 6;
     */
    lang: number;
}
/**
 * @generated from protobuf message news.NormalizedSource
 */
export interface NormalizedSource {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: news.SourceType type = 2;
     */
    type: SourceType;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: string slug = 4;
     */
    slug: string;
    /**
     * @generated from protobuf field: int32 lang = 5;
     */
    lang: number;
    /**
     * @generated from protobuf field: int32 state = 6;
     */
    state: number;
}
/**
 * @generated from protobuf message news.RawArticle
 */
export interface RawArticle {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: string image_url = 5;
     */
    imageUrl: string;
    /**
     * @generated from protobuf field: bytes source_uuid = 6;
     */
    sourceUuid: Uint8Array;
    /**
     * @generated from protobuf field: int32 lang = 7;
     */
    lang: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp published_at = 8;
     */
    publishedAt?: Timestamp;
}
/**
 * @generated from protobuf message news.CleanArticle
 */
export interface CleanArticle {
    /**
     * @generated from protobuf field: string uuid = 1;
     */
    uuid: string;
    /**
     * @generated from protobuf field: string source_uuid = 2;
     */
    sourceUuid: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: int32 lang = 4;
     */
    lang: number;
}
/**
 * @generated from protobuf message news.ApiInArticle
 */
export interface ApiInArticle {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: string url = 2;
     */
    url: string;
    /**
     * @generated from protobuf field: string title = 3;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: bytes image_uuid = 5;
     */
    imageUuid: Uint8Array;
    /**
     * @generated from protobuf field: bytes source_uuid = 6;
     */
    sourceUuid: Uint8Array;
    /**
     * @generated from protobuf field: int32 lang = 7;
     */
    lang: number;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp published_at = 8;
     */
    publishedAt?: Timestamp;
}
/**
 * @generated from protobuf message news.CategorizedPush
 */
export interface CategorizedPush {
    /**
     * @generated from protobuf field: news.CategorizedSource source = 1;
     */
    source?: CategorizedSource;
    /**
     * @generated from protobuf field: news.CategorizedArticle article = 2;
     */
    article?: CategorizedArticle;
}
/**
 * @generated from protobuf message news.CategorizedSource
 */
export interface CategorizedSource {
    /**
     * @generated from protobuf field: string source_uuid = 1;
     */
    sourceUuid: string;
    /**
     * @generated from protobuf field: repeated int32 categories = 2;
     */
    categories: number[];
}
/**
 * @generated from protobuf message news.CategorizedArticle
 */
export interface CategorizedArticle {
    /**
     * @generated from protobuf field: string article_uuid = 1;
     */
    articleUuid: string;
    /**
     * @generated from protobuf field: repeated int32 categories = 2;
     */
    categories: number[];
}
/**
 * @generated from protobuf message news.ArticleI10n
 */
export interface ArticleI10n {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: int32 lang = 2;
     */
    lang: number;
    /**
     * @generated from protobuf field: string clean = 3;
     */
    clean: string;
    /**
     * @generated from protobuf field: string title = 4;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 5;
     */
    content: string;
}
/**
 * @generated from protobuf message news.Article
 */
export interface Article {
    /**
     * @generated from protobuf field: news.ArticleMeta meta = 1;
     */
    meta?: ArticleMeta;
    /**
     * @generated from protobuf field: news.ArticleData data = 2;
     */
    data?: ArticleData;
    /**
     * @generated from protobuf field: news.ArticleCounts counts = 3;
     */
    counts?: ArticleCounts;
    /**
     * @generated from protobuf field: news.ArticleFlags flags = 4;
     */
    flags?: ArticleFlags;
}
/**
 * @generated from protobuf message news.ArticleShort
 */
export interface ArticleShort {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: news.ArticleMeta meta = 2;
     */
    meta?: ArticleMeta;
    /**
     * @generated from protobuf field: news.ArticleDataShort data = 3;
     */
    data?: ArticleDataShort;
    /**
     * @generated from protobuf field: news.ArticleCounts counts = 4;
     */
    counts?: ArticleCounts;
    /**
     * @generated from protobuf field: news.ArticleFlags flags = 5;
     */
    flags?: ArticleFlags;
}
/**
 * @generated from protobuf message news.ArticleMeta
 */
export interface ArticleMeta {
    /**
     * @generated from protobuf field: int32 primary_lang = 1;
     */
    primaryLang: number;
    /**
     * @generated from protobuf field: bytes source_uuid = 2;
     */
    sourceUuid: Uint8Array;
    /**
     * @generated from protobuf field: optional bytes image_uuid = 3;
     */
    imageUuid?: Uint8Array;
    /**
     * @generated from protobuf field: repeated int32 categories = 4;
     */
    categories: number[];
    /**
     * @generated from protobuf field: string url = 5;
     */
    url: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp published_at = 6;
     */
    publishedAt?: Timestamp;
}
/**
 * @generated from protobuf message news.ArticleData
 */
export interface ArticleData {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
    /**
     * @generated from protobuf field: string content = 2;
     */
    content: string;
}
/**
 * @generated from protobuf message news.ArticleDataShort
 */
export interface ArticleDataShort {
    /**
     * @generated from protobuf field: string title = 1;
     */
    title: string;
}
/**
 * @generated from protobuf message news.ArticleCounts
 */
export interface ArticleCounts {
    /**
     * @generated from protobuf field: int32 views = 1;
     */
    views: number;
    /**
     * @generated from protobuf field: int32 likes = 2;
     */
    likes: number;
    /**
     * @generated from protobuf field: int32 shares = 3;
     */
    shares: number;
    /**
     * @generated from protobuf field: int32 comments = 4;
     */
    comments: number;
}
/**
 * @generated from protobuf message news.ArticleFlags
 */
export interface ArticleFlags {
    /**
     * @generated from protobuf field: bool is_favorite = 1;
     */
    isFavorite: boolean;
}
/**
 * @generated from protobuf message news.ArticleContent
 */
export interface ArticleContent {
    /**
     * @generated from protobuf field: string content = 1;
     */
    content: string;
}
/**
 * @generated from protobuf message news.SourceMeta
 */
export interface SourceMeta {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: news.SourceType type = 2;
     */
    type: SourceType;
    /**
     * @generated from protobuf field: optional bytes icon = 3;
     */
    icon?: Uint8Array;
}
/**
 * @generated from protobuf message news.SourceData
 */
export interface SourceData {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string;
}
/**
 * @generated from protobuf message news.Source
 */
export interface Source {
    /**
     * @generated from protobuf field: news.SourceMeta meta = 1;
     */
    meta?: SourceMeta;
    /**
     * @generated from protobuf field: news.SourceData data = 2;
     */
    data?: SourceData;
}
/**
 * @generated from protobuf message news.Category
 */
export interface Category {
    /**
     * @generated from protobuf field: news.CategoryMeta meta = 1;
     */
    meta?: CategoryMeta;
    /**
     * @generated from protobuf field: news.CategoryData data = 2;
     */
    data?: CategoryData;
}
/**
 * @generated from protobuf message news.CategoryMeta
 */
export interface CategoryMeta {
    /**
     * @generated from protobuf field: int32 uuid = 1;
     */
    uuid: number;
    /**
     * @generated from protobuf field: optional int32 parent_id = 2;
     */
    parentId?: number;
}
/**
 * @generated from protobuf message news.CategoryData
 */
export interface CategoryData {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message news.SourceCategory
 */
export interface SourceCategory {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: int32 category_id = 2;
     */
    categoryId: number;
    /**
     * @generated from protobuf field: bytes source_uuid = 3;
     */
    sourceUuid: Uint8Array;
}
/**
 * @generated from protobuf message news.NewSourceCategory
 */
export interface NewSourceCategory {
    /**
     * @generated from protobuf field: int32 category_id = 2;
     */
    categoryId: number;
    /**
     * @generated from protobuf field: bytes source_uuid = 3;
     */
    sourceUuid: Uint8Array;
}
/**
 * @generated from protobuf message news.GetCategoriesParams
 */
export interface GetCategoriesParams {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
}
/**
 * @generated from protobuf message news.GetCategoriesResponse
 */
export interface GetCategoriesResponse {
    /**
     * @generated from protobuf field: repeated news.Category categories = 1;
     */
    categories: Category[];
}
/**
 * @generated from protobuf message news.GetCategoryParams
 */
export interface GetCategoryParams {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
    /**
     * @generated from protobuf field: optional bytes parent_id = 2;
     */
    parentId?: Uint8Array;
}
/**
 * @generated from protobuf message news.GetSourcesByUuidsParams
 */
export interface GetSourcesByUuidsParams {
    /**
     * @generated from protobuf field: repeated bytes source_uuids = 1;
     */
    sourceUuids: Uint8Array[];
}
/**
 * @generated from protobuf message news.GetSourcesBySlugParams
 */
export interface GetSourcesBySlugParams {
    /**
     * @generated from protobuf field: string slugs = 1;
     */
    slugs: string;
}
/**
 * @generated from protobuf message news.GetSourcesResponse
 */
export interface GetSourcesResponse {
    /**
     * @generated from protobuf field: repeated news.Source sources = 1;
     */
    sources: Source[];
}
/**
 * @generated from protobuf message news.GetSourcesByCategoryParams
 */
export interface GetSourcesByCategoryParams {
    /**
     * @generated from protobuf field: int32 category_id = 1;
     */
    categoryId: number;
    /**
     * @generated from protobuf field: int32 limit = 2;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 3;
     */
    offset: number;
}
/**
 * @generated from protobuf message news.GetSourcesByCategoryResponse
 */
export interface GetSourcesByCategoryResponse {
    /**
     * @generated from protobuf field: repeated bytes sources = 1;
     */
    sources: Uint8Array[];
    /**
     * @generated from protobuf field: int32 total = 2;
     */
    total: number;
}
/**
 * @generated from protobuf message news.GetArticlesByUuidsParams
 */
export interface GetArticlesByUuidsParams {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
    /**
     * @generated from protobuf field: repeated bytes uuids = 2;
     */
    uuids: Uint8Array[];
}
/**
 * @generated from protobuf message news.GetArticlesByFilterParams
 */
export interface GetArticlesByFilterParams {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
    /**
     * @generated from protobuf field: bytes filter_uuid = 2;
     */
    filterUuid: Uint8Array;
    /**
     * @generated from protobuf field: optional news.Sort order = 3;
     */
    order?: Sort;
    /**
     * @generated from protobuf field: int32 offset = 4;
     */
    offset: number;
    /**
     * @generated from protobuf field: int32 limit = 5;
     */
    limit: number;
}
/**
 * @generated from protobuf message news.GetArticlesBySourceParams
 */
export interface GetArticlesBySourceParams {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
    /**
     * @generated from protobuf field: bytes source_uuid = 2;
     */
    sourceUuid: Uint8Array;
    /**
     * @generated from protobuf field: optional news.Sort order = 3;
     */
    order?: Sort;
    /**
     * @generated from protobuf field: int32 offset = 4;
     */
    offset: number;
    /**
     * @generated from protobuf field: int32 limit = 5;
     */
    limit: number;
}
/**
 * @generated from protobuf message news.GetArticlesByCategoryParams
 */
export interface GetArticlesByCategoryParams {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
    /**
     * @generated from protobuf field: int32 category_id = 2;
     */
    categoryId: number;
    /**
     * @generated from protobuf field: optional news.Sort order = 3;
     */
    order?: Sort;
    /**
     * @generated from protobuf field: int32 offset = 4;
     */
    offset: number;
    /**
     * @generated from protobuf field: int32 limit = 5;
     */
    limit: number;
}
/**
 * @generated from protobuf message news.GetArticlesShortResponse
 */
export interface GetArticlesShortResponse {
    /**
     * @generated from protobuf field: repeated news.ArticleShort articles = 1;
     */
    articles: ArticleShort[];
    /**
     * @generated from protobuf field: int32 total = 2;
     */
    total: number;
}
/**
 * @generated from protobuf message news.SearchSourceParams
 */
export interface SearchSourceParams {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message news.GetArticle
 */
export interface GetArticle {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
    /**
     * @generated from protobuf field: bytes uuid = 2;
     */
    uuid: Uint8Array;
}
/**
 * @generated from protobuf message news.GetCategoryI10n
 */
export interface GetCategoryI10n {
    /**
     * @generated from protobuf field: int32 lang = 1;
     */
    lang: number;
    /**
     * @generated from protobuf field: news.CategoryData data = 2;
     */
    data?: CategoryData;
}
/**
 * @generated from protobuf message news.ActionArticle
 */
export interface ActionArticle {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: bytes article_uuid = 2;
     */
    articleUuid: Uint8Array;
}
/**
 * @generated from protobuf message news.UpsertImageUUID
 */
export interface UpsertImageUUID {
    /**
     * @generated from protobuf field: bytes article_uuid = 1;
     */
    articleUuid: Uint8Array;
    /**
     * @generated from protobuf field: bytes image_uuid = 2;
     */
    imageUuid: Uint8Array;
}
/**
 * @generated from protobuf message news.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf field: bytes uuid = 1;
     */
    uuid: Uint8Array;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: news.Sort publish_order = 3;
     */
    publishOrder: Sort;
    /**
     * @generated from protobuf field: repeated news.SourceCategory items = 4;
     */
    items: SourceCategory[];
}
/**
 * @generated from protobuf message news.CreateFilterParams
 */
export interface CreateFilterParams {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional news.Sort order = 3;
     */
    order?: Sort;
    /**
     * @generated from protobuf field: repeated news.NewSourceCategory items = 4;
     */
    items: NewSourceCategory[];
}
/**
 * @generated from protobuf message news.CreateFilterFromCategoriesParams
 */
export interface CreateFilterFromCategoriesParams {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: optional string name = 2;
     */
    name?: string;
    /**
     * @generated from protobuf field: optional news.Sort order = 3;
     */
    order?: Sort;
    /**
     * @generated from protobuf field: repeated int32 categories = 4;
     */
    categories: number[];
}
/**
 * @generated from protobuf message news.GetFiltersParams
 */
export interface GetFiltersParams {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
}
/**
 * @generated from protobuf message news.GetFiltersResponse
 */
export interface GetFiltersResponse {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: repeated news.Filter filters = 2;
     */
    filters: Filter[];
}
/**
 * @generated from protobuf message news.GetFiltersShortResponse
 */
export interface GetFiltersShortResponse {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: repeated bytes filters = 2;
     */
    filters: Uint8Array[];
}
/**
 * @generated from protobuf message news.UpdateFilterParams
 */
export interface UpdateFilterParams {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: bytes filter_uuid = 2;
     */
    filterUuid: Uint8Array;
    /**
     * @generated from protobuf field: string name = 3;
     */
    name: string;
    /**
     * @generated from protobuf field: optional news.Sort order = 4;
     */
    order?: Sort;
}
/**
 * @generated from protobuf message news.UpdateFilterSourcesParams
 */
export interface UpdateFilterSourcesParams {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: bytes filter_uuid = 2;
     */
    filterUuid: Uint8Array;
    /**
     * @generated from protobuf field: repeated bytes add_filter_sources = 3;
     */
    addFilterSources: Uint8Array[];
    /**
     * @generated from protobuf field: repeated bytes remove_filter_sources = 4;
     */
    removeFilterSources: Uint8Array[];
}
/**
 * @generated from protobuf message news.RemoveFilterParams
 */
export interface RemoveFilterParams {
    /**
     * @generated from protobuf field: bytes account_uuid = 1;
     */
    accountUuid: Uint8Array;
    /**
     * @generated from protobuf field: bytes filter_uuid = 2;
     */
    filterUuid: Uint8Array;
}
/**
 * @generated from protobuf enum news.ArticleProcessingState
 */
export enum ArticleProcessingState {
    /**
     * @generated from protobuf enum value: ARTICLE_PROCESSING_STATE_UNSPECIFIED = 0;
     */
    ARTICLE_PROCESSING_STATE_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RECEIVED = 1;
     */
    RECEIVED = 1,
    /**
     * @generated from protobuf enum value: NORMALIZED = 2;
     */
    NORMALIZED = 2,
    /**
     * @generated from protobuf enum value: CATEGORIZED = 3;
     */
    CATEGORIZED = 3,
    /**
     * @generated from protobuf enum value: INDEXED = 4;
     */
    INDEXED = 4,
    /**
     * @generated from protobuf enum value: IMAGE_UPLOADED = 5;
     */
    IMAGE_UPLOADED = 5,
    /**
     * @generated from protobuf enum value: ERROR = 6;
     */
    ERROR = 6
}
/**
 * @generated from protobuf enum news.ArticleCountAction
 */
export enum ArticleCountAction {
    /**
     * @generated from protobuf enum value: ACTION_UNSPECIFIED = 0;
     */
    ACTION_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: VIEWS = 1;
     */
    VIEWS = 1,
    /**
     * @generated from protobuf enum value: LIKE = 2;
     */
    LIKE = 2,
    /**
     * @generated from protobuf enum value: UNLIKE = 3;
     */
    UNLIKE = 3,
    /**
     * @generated from protobuf enum value: SHARE = 4;
     */
    SHARE = 4
}
/**
 * @generated from protobuf enum news.SourceType
 */
export enum SourceType {
    /**
     * @generated from protobuf enum value: SOURCE_TYPE_UNSPECIFIED = 0;
     */
    SOURCE_TYPE_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: WEB = 1;
     */
    WEB = 1,
    /**
     * @generated from protobuf enum value: XCOM = 2;
     */
    XCOM = 2,
    /**
     * @generated from protobuf enum value: TELEGRAM = 3;
     */
    TELEGRAM = 3
}
/**
 * @generated from protobuf enum news.Sort
 */
export enum Sort {
    /**
     * @generated from protobuf enum value: SORT_UNSPECIFIED = 0;
     */
    SORT_UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: DESC = 1;
     */
    DESC = 1,
    /**
     * @generated from protobuf enum value: ASC = 2;
     */
    ASC = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class RawSource$Type extends MessageType<RawSource> {
    constructor() {
        super("news.RawSource", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["news.SourceType", SourceType] },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RawSource>): RawSource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.type = 0;
        message.name = "";
        message.slug = "";
        message.url = "";
        message.lang = 0;
        if (value !== undefined)
            reflectionMergePartial<RawSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RawSource): RawSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* news.SourceType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string slug */ 4:
                    message.slug = reader.string();
                    break;
                case /* string url */ 5:
                    message.url = reader.string();
                    break;
                case /* int32 lang */ 6:
                    message.lang = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RawSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* news.SourceType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string slug = 4; */
        if (message.slug !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.slug);
        /* string url = 5; */
        if (message.url !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.url);
        /* int32 lang = 6; */
        if (message.lang !== 0)
            writer.tag(6, WireType.Varint).int32(message.lang);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.RawSource
 */
export const RawSource = new RawSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NormalizedSource$Type extends MessageType<NormalizedSource> {
    constructor() {
        super("news.NormalizedSource", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["news.SourceType", SourceType] },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "slug", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "state", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<NormalizedSource>): NormalizedSource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.type = 0;
        message.name = "";
        message.slug = "";
        message.lang = 0;
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<NormalizedSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NormalizedSource): NormalizedSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* news.SourceType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string slug */ 4:
                    message.slug = reader.string();
                    break;
                case /* int32 lang */ 5:
                    message.lang = reader.int32();
                    break;
                case /* int32 state */ 6:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NormalizedSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* news.SourceType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string slug = 4; */
        if (message.slug !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.slug);
        /* int32 lang = 5; */
        if (message.lang !== 0)
            writer.tag(5, WireType.Varint).int32(message.lang);
        /* int32 state = 6; */
        if (message.state !== 0)
            writer.tag(6, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.NormalizedSource
 */
export const NormalizedSource = new NormalizedSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RawArticle$Type extends MessageType<RawArticle> {
    constructor() {
        super("news.RawArticle", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "image_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "source_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "published_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<RawArticle>): RawArticle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.url = "";
        message.title = "";
        message.content = "";
        message.imageUrl = "";
        message.sourceUuid = new Uint8Array(0);
        message.lang = 0;
        if (value !== undefined)
            reflectionMergePartial<RawArticle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RawArticle): RawArticle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string image_url */ 5:
                    message.imageUrl = reader.string();
                    break;
                case /* bytes source_uuid */ 6:
                    message.sourceUuid = reader.bytes();
                    break;
                case /* int32 lang */ 7:
                    message.lang = reader.int32();
                    break;
                case /* google.protobuf.Timestamp published_at */ 8:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RawArticle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string image_url = 5; */
        if (message.imageUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.imageUrl);
        /* bytes source_uuid = 6; */
        if (message.sourceUuid.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.sourceUuid);
        /* int32 lang = 7; */
        if (message.lang !== 0)
            writer.tag(7, WireType.Varint).int32(message.lang);
        /* google.protobuf.Timestamp published_at = 8; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.RawArticle
 */
export const RawArticle = new RawArticle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CleanArticle$Type extends MessageType<CleanArticle> {
    constructor() {
        super("news.CleanArticle", [
            { no: 1, name: "uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "source_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CleanArticle>): CleanArticle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = "";
        message.sourceUuid = "";
        message.content = "";
        message.lang = 0;
        if (value !== undefined)
            reflectionMergePartial<CleanArticle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CleanArticle): CleanArticle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uuid */ 1:
                    message.uuid = reader.string();
                    break;
                case /* string source_uuid */ 2:
                    message.sourceUuid = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* int32 lang */ 4:
                    message.lang = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CleanArticle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uuid = 1; */
        if (message.uuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uuid);
        /* string source_uuid = 2; */
        if (message.sourceUuid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sourceUuid);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* int32 lang = 4; */
        if (message.lang !== 0)
            writer.tag(4, WireType.Varint).int32(message.lang);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CleanArticle
 */
export const CleanArticle = new CleanArticle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApiInArticle$Type extends MessageType<ApiInArticle> {
    constructor() {
        super("news.ApiInArticle", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "image_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 6, name: "source_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "published_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ApiInArticle>): ApiInArticle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.url = "";
        message.title = "";
        message.content = "";
        message.imageUuid = new Uint8Array(0);
        message.sourceUuid = new Uint8Array(0);
        message.lang = 0;
        if (value !== undefined)
            reflectionMergePartial<ApiInArticle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApiInArticle): ApiInArticle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* bytes image_uuid */ 5:
                    message.imageUuid = reader.bytes();
                    break;
                case /* bytes source_uuid */ 6:
                    message.sourceUuid = reader.bytes();
                    break;
                case /* int32 lang */ 7:
                    message.lang = reader.int32();
                    break;
                case /* google.protobuf.Timestamp published_at */ 8:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApiInArticle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* bytes image_uuid = 5; */
        if (message.imageUuid.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.imageUuid);
        /* bytes source_uuid = 6; */
        if (message.sourceUuid.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.sourceUuid);
        /* int32 lang = 7; */
        if (message.lang !== 0)
            writer.tag(7, WireType.Varint).int32(message.lang);
        /* google.protobuf.Timestamp published_at = 8; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ApiInArticle
 */
export const ApiInArticle = new ApiInArticle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategorizedPush$Type extends MessageType<CategorizedPush> {
    constructor() {
        super("news.CategorizedPush", [
            { no: 1, name: "source", kind: "message", T: () => CategorizedSource },
            { no: 2, name: "article", kind: "message", T: () => CategorizedArticle }
        ]);
    }
    create(value?: PartialMessage<CategorizedPush>): CategorizedPush {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CategorizedPush>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategorizedPush): CategorizedPush {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* news.CategorizedSource source */ 1:
                    message.source = CategorizedSource.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                case /* news.CategorizedArticle article */ 2:
                    message.article = CategorizedArticle.internalBinaryRead(reader, reader.uint32(), options, message.article);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategorizedPush, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* news.CategorizedSource source = 1; */
        if (message.source)
            CategorizedSource.internalBinaryWrite(message.source, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* news.CategorizedArticle article = 2; */
        if (message.article)
            CategorizedArticle.internalBinaryWrite(message.article, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CategorizedPush
 */
export const CategorizedPush = new CategorizedPush$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategorizedSource$Type extends MessageType<CategorizedSource> {
    constructor() {
        super("news.CategorizedSource", [
            { no: 1, name: "source_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "categories", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CategorizedSource>): CategorizedSource {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sourceUuid = "";
        message.categories = [];
        if (value !== undefined)
            reflectionMergePartial<CategorizedSource>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategorizedSource): CategorizedSource {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string source_uuid */ 1:
                    message.sourceUuid = reader.string();
                    break;
                case /* repeated int32 categories */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.categories.push(reader.int32());
                    else
                        message.categories.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategorizedSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string source_uuid = 1; */
        if (message.sourceUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sourceUuid);
        /* repeated int32 categories = 2; */
        if (message.categories.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.categories.length; i++)
                writer.int32(message.categories[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CategorizedSource
 */
export const CategorizedSource = new CategorizedSource$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategorizedArticle$Type extends MessageType<CategorizedArticle> {
    constructor() {
        super("news.CategorizedArticle", [
            { no: 1, name: "article_uuid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "categories", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CategorizedArticle>): CategorizedArticle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.articleUuid = "";
        message.categories = [];
        if (value !== undefined)
            reflectionMergePartial<CategorizedArticle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategorizedArticle): CategorizedArticle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string article_uuid */ 1:
                    message.articleUuid = reader.string();
                    break;
                case /* repeated int32 categories */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.categories.push(reader.int32());
                    else
                        message.categories.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategorizedArticle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string article_uuid = 1; */
        if (message.articleUuid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.articleUuid);
        /* repeated int32 categories = 2; */
        if (message.categories.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.categories.length; i++)
                writer.int32(message.categories[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CategorizedArticle
 */
export const CategorizedArticle = new CategorizedArticle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleI10n$Type extends MessageType<ArticleI10n> {
    constructor() {
        super("news.ArticleI10n", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "clean", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ArticleI10n>): ArticleI10n {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.lang = 0;
        message.clean = "";
        message.title = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<ArticleI10n>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleI10n): ArticleI10n {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* int32 lang */ 2:
                    message.lang = reader.int32();
                    break;
                case /* string clean */ 3:
                    message.clean = reader.string();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* string content */ 5:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleI10n, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* int32 lang = 2; */
        if (message.lang !== 0)
            writer.tag(2, WireType.Varint).int32(message.lang);
        /* string clean = 3; */
        if (message.clean !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.clean);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* string content = 5; */
        if (message.content !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleI10n
 */
export const ArticleI10n = new ArticleI10n$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Article$Type extends MessageType<Article> {
    constructor() {
        super("news.Article", [
            { no: 1, name: "meta", kind: "message", T: () => ArticleMeta },
            { no: 2, name: "data", kind: "message", T: () => ArticleData },
            { no: 3, name: "counts", kind: "message", T: () => ArticleCounts },
            { no: 4, name: "flags", kind: "message", T: () => ArticleFlags }
        ]);
    }
    create(value?: PartialMessage<Article>): Article {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Article>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Article): Article {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* news.ArticleMeta meta */ 1:
                    message.meta = ArticleMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* news.ArticleData data */ 2:
                    message.data = ArticleData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* news.ArticleCounts counts */ 3:
                    message.counts = ArticleCounts.internalBinaryRead(reader, reader.uint32(), options, message.counts);
                    break;
                case /* news.ArticleFlags flags */ 4:
                    message.flags = ArticleFlags.internalBinaryRead(reader, reader.uint32(), options, message.flags);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Article, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* news.ArticleMeta meta = 1; */
        if (message.meta)
            ArticleMeta.internalBinaryWrite(message.meta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* news.ArticleData data = 2; */
        if (message.data)
            ArticleData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* news.ArticleCounts counts = 3; */
        if (message.counts)
            ArticleCounts.internalBinaryWrite(message.counts, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* news.ArticleFlags flags = 4; */
        if (message.flags)
            ArticleFlags.internalBinaryWrite(message.flags, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.Article
 */
export const Article = new Article$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleShort$Type extends MessageType<ArticleShort> {
    constructor() {
        super("news.ArticleShort", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "meta", kind: "message", T: () => ArticleMeta },
            { no: 3, name: "data", kind: "message", T: () => ArticleDataShort },
            { no: 4, name: "counts", kind: "message", T: () => ArticleCounts },
            { no: 5, name: "flags", kind: "message", T: () => ArticleFlags }
        ]);
    }
    create(value?: PartialMessage<ArticleShort>): ArticleShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ArticleShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleShort): ArticleShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* news.ArticleMeta meta */ 2:
                    message.meta = ArticleMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* news.ArticleDataShort data */ 3:
                    message.data = ArticleDataShort.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* news.ArticleCounts counts */ 4:
                    message.counts = ArticleCounts.internalBinaryRead(reader, reader.uint32(), options, message.counts);
                    break;
                case /* news.ArticleFlags flags */ 5:
                    message.flags = ArticleFlags.internalBinaryRead(reader, reader.uint32(), options, message.flags);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* news.ArticleMeta meta = 2; */
        if (message.meta)
            ArticleMeta.internalBinaryWrite(message.meta, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* news.ArticleDataShort data = 3; */
        if (message.data)
            ArticleDataShort.internalBinaryWrite(message.data, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* news.ArticleCounts counts = 4; */
        if (message.counts)
            ArticleCounts.internalBinaryWrite(message.counts, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* news.ArticleFlags flags = 5; */
        if (message.flags)
            ArticleFlags.internalBinaryWrite(message.flags, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleShort
 */
export const ArticleShort = new ArticleShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleMeta$Type extends MessageType<ArticleMeta> {
    constructor() {
        super("news.ArticleMeta", [
            { no: 1, name: "primary_lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "source_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "image_uuid", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "categories", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "published_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ArticleMeta>): ArticleMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.primaryLang = 0;
        message.sourceUuid = new Uint8Array(0);
        message.categories = [];
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<ArticleMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleMeta): ArticleMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 primary_lang */ 1:
                    message.primaryLang = reader.int32();
                    break;
                case /* bytes source_uuid */ 2:
                    message.sourceUuid = reader.bytes();
                    break;
                case /* optional bytes image_uuid */ 3:
                    message.imageUuid = reader.bytes();
                    break;
                case /* repeated int32 categories */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.categories.push(reader.int32());
                    else
                        message.categories.push(reader.int32());
                    break;
                case /* string url */ 5:
                    message.url = reader.string();
                    break;
                case /* google.protobuf.Timestamp published_at */ 6:
                    message.publishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.publishedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 primary_lang = 1; */
        if (message.primaryLang !== 0)
            writer.tag(1, WireType.Varint).int32(message.primaryLang);
        /* bytes source_uuid = 2; */
        if (message.sourceUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.sourceUuid);
        /* optional bytes image_uuid = 3; */
        if (message.imageUuid !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.imageUuid);
        /* repeated int32 categories = 4; */
        if (message.categories.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.categories.length; i++)
                writer.int32(message.categories[i]);
            writer.join();
        }
        /* string url = 5; */
        if (message.url !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.url);
        /* google.protobuf.Timestamp published_at = 6; */
        if (message.publishedAt)
            Timestamp.internalBinaryWrite(message.publishedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleMeta
 */
export const ArticleMeta = new ArticleMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleData$Type extends MessageType<ArticleData> {
    constructor() {
        super("news.ArticleData", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ArticleData>): ArticleData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<ArticleData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleData): ArticleData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleData
 */
export const ArticleData = new ArticleData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleDataShort$Type extends MessageType<ArticleDataShort> {
    constructor() {
        super("news.ArticleDataShort", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ArticleDataShort>): ArticleDataShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<ArticleDataShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleDataShort): ArticleDataShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleDataShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleDataShort
 */
export const ArticleDataShort = new ArticleDataShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleCounts$Type extends MessageType<ArticleCounts> {
    constructor() {
        super("news.ArticleCounts", [
            { no: 1, name: "views", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "likes", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "shares", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "comments", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ArticleCounts>): ArticleCounts {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.views = 0;
        message.likes = 0;
        message.shares = 0;
        message.comments = 0;
        if (value !== undefined)
            reflectionMergePartial<ArticleCounts>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleCounts): ArticleCounts {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 views */ 1:
                    message.views = reader.int32();
                    break;
                case /* int32 likes */ 2:
                    message.likes = reader.int32();
                    break;
                case /* int32 shares */ 3:
                    message.shares = reader.int32();
                    break;
                case /* int32 comments */ 4:
                    message.comments = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleCounts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 views = 1; */
        if (message.views !== 0)
            writer.tag(1, WireType.Varint).int32(message.views);
        /* int32 likes = 2; */
        if (message.likes !== 0)
            writer.tag(2, WireType.Varint).int32(message.likes);
        /* int32 shares = 3; */
        if (message.shares !== 0)
            writer.tag(3, WireType.Varint).int32(message.shares);
        /* int32 comments = 4; */
        if (message.comments !== 0)
            writer.tag(4, WireType.Varint).int32(message.comments);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleCounts
 */
export const ArticleCounts = new ArticleCounts$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleFlags$Type extends MessageType<ArticleFlags> {
    constructor() {
        super("news.ArticleFlags", [
            { no: 1, name: "is_favorite", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ArticleFlags>): ArticleFlags {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isFavorite = false;
        if (value !== undefined)
            reflectionMergePartial<ArticleFlags>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleFlags): ArticleFlags {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_favorite */ 1:
                    message.isFavorite = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleFlags, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_favorite = 1; */
        if (message.isFavorite !== false)
            writer.tag(1, WireType.Varint).bool(message.isFavorite);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleFlags
 */
export const ArticleFlags = new ArticleFlags$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArticleContent$Type extends MessageType<ArticleContent> {
    constructor() {
        super("news.ArticleContent", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ArticleContent>): ArticleContent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<ArticleContent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArticleContent): ArticleContent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ArticleContent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ArticleContent
 */
export const ArticleContent = new ArticleContent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceMeta$Type extends MessageType<SourceMeta> {
    constructor() {
        super("news.SourceMeta", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["news.SourceType", SourceType] },
            { no: 3, name: "icon", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SourceMeta>): SourceMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<SourceMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceMeta): SourceMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* news.SourceType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional bytes icon */ 3:
                    message.icon = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SourceMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* news.SourceType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional bytes icon = 3; */
        if (message.icon !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.SourceMeta
 */
export const SourceMeta = new SourceMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceData$Type extends MessageType<SourceData> {
    constructor() {
        super("news.SourceData", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SourceData>): SourceData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<SourceData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceData): SourceData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SourceData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.SourceData
 */
export const SourceData = new SourceData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Source$Type extends MessageType<Source> {
    constructor() {
        super("news.Source", [
            { no: 1, name: "meta", kind: "message", T: () => SourceMeta },
            { no: 2, name: "data", kind: "message", T: () => SourceData }
        ]);
    }
    create(value?: PartialMessage<Source>): Source {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Source>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Source): Source {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* news.SourceMeta meta */ 1:
                    message.meta = SourceMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* news.SourceData data */ 2:
                    message.data = SourceData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Source, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* news.SourceMeta meta = 1; */
        if (message.meta)
            SourceMeta.internalBinaryWrite(message.meta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* news.SourceData data = 2; */
        if (message.data)
            SourceData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.Source
 */
export const Source = new Source$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Category$Type extends MessageType<Category> {
    constructor() {
        super("news.Category", [
            { no: 1, name: "meta", kind: "message", T: () => CategoryMeta },
            { no: 2, name: "data", kind: "message", T: () => CategoryData }
        ]);
    }
    create(value?: PartialMessage<Category>): Category {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Category>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Category): Category {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* news.CategoryMeta meta */ 1:
                    message.meta = CategoryMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* news.CategoryData data */ 2:
                    message.data = CategoryData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Category, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* news.CategoryMeta meta = 1; */
        if (message.meta)
            CategoryMeta.internalBinaryWrite(message.meta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* news.CategoryData data = 2; */
        if (message.data)
            CategoryData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.Category
 */
export const Category = new Category$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryMeta$Type extends MessageType<CategoryMeta> {
    constructor() {
        super("news.CategoryMeta", [
            { no: 1, name: "uuid", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "parent_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryMeta>): CategoryMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = 0;
        if (value !== undefined)
            reflectionMergePartial<CategoryMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryMeta): CategoryMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 uuid */ 1:
                    message.uuid = reader.int32();
                    break;
                case /* optional int32 parent_id */ 2:
                    message.parentId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 uuid = 1; */
        if (message.uuid !== 0)
            writer.tag(1, WireType.Varint).int32(message.uuid);
        /* optional int32 parent_id = 2; */
        if (message.parentId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.parentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CategoryMeta
 */
export const CategoryMeta = new CategoryMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CategoryData$Type extends MessageType<CategoryData> {
    constructor() {
        super("news.CategoryData", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CategoryData>): CategoryData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<CategoryData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CategoryData): CategoryData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CategoryData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CategoryData
 */
export const CategoryData = new CategoryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SourceCategory$Type extends MessageType<SourceCategory> {
    constructor() {
        super("news.SourceCategory", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "category_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "source_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<SourceCategory>): SourceCategory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.categoryId = 0;
        message.sourceUuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<SourceCategory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SourceCategory): SourceCategory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* int32 category_id */ 2:
                    message.categoryId = reader.int32();
                    break;
                case /* bytes source_uuid */ 3:
                    message.sourceUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SourceCategory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* int32 category_id = 2; */
        if (message.categoryId !== 0)
            writer.tag(2, WireType.Varint).int32(message.categoryId);
        /* bytes source_uuid = 3; */
        if (message.sourceUuid.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.sourceUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.SourceCategory
 */
export const SourceCategory = new SourceCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewSourceCategory$Type extends MessageType<NewSourceCategory> {
    constructor() {
        super("news.NewSourceCategory", [
            { no: 2, name: "category_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "source_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<NewSourceCategory>): NewSourceCategory {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categoryId = 0;
        message.sourceUuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<NewSourceCategory>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewSourceCategory): NewSourceCategory {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 category_id */ 2:
                    message.categoryId = reader.int32();
                    break;
                case /* bytes source_uuid */ 3:
                    message.sourceUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewSourceCategory, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 category_id = 2; */
        if (message.categoryId !== 0)
            writer.tag(2, WireType.Varint).int32(message.categoryId);
        /* bytes source_uuid = 3; */
        if (message.sourceUuid.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.sourceUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.NewSourceCategory
 */
export const NewSourceCategory = new NewSourceCategory$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesParams$Type extends MessageType<GetCategoriesParams> {
    constructor() {
        super("news.GetCategoriesParams", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesParams>): GetCategoriesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesParams): GetCategoriesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetCategoriesParams
 */
export const GetCategoriesParams = new GetCategoriesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoriesResponse$Type extends MessageType<GetCategoriesResponse> {
    constructor() {
        super("news.GetCategoriesResponse", [
            { no: 1, name: "categories", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<GetCategoriesResponse>): GetCategoriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categories = [];
        if (value !== undefined)
            reflectionMergePartial<GetCategoriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoriesResponse): GetCategoriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated news.Category categories */ 1:
                    message.categories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated news.Category categories = 1; */
        for (let i = 0; i < message.categories.length; i++)
            Category.internalBinaryWrite(message.categories[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetCategoriesResponse
 */
export const GetCategoriesResponse = new GetCategoriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoryParams$Type extends MessageType<GetCategoryParams> {
    constructor() {
        super("news.GetCategoryParams", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "parent_id", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetCategoryParams>): GetCategoryParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        if (value !== undefined)
            reflectionMergePartial<GetCategoryParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoryParams): GetCategoryParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                case /* optional bytes parent_id */ 2:
                    message.parentId = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoryParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        /* optional bytes parent_id = 2; */
        if (message.parentId !== undefined)
            writer.tag(2, WireType.LengthDelimited).bytes(message.parentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetCategoryParams
 */
export const GetCategoryParams = new GetCategoryParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSourcesByUuidsParams$Type extends MessageType<GetSourcesByUuidsParams> {
    constructor() {
        super("news.GetSourcesByUuidsParams", [
            { no: 1, name: "source_uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetSourcesByUuidsParams>): GetSourcesByUuidsParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sourceUuids = [];
        if (value !== undefined)
            reflectionMergePartial<GetSourcesByUuidsParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSourcesByUuidsParams): GetSourcesByUuidsParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes source_uuids */ 1:
                    message.sourceUuids.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSourcesByUuidsParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes source_uuids = 1; */
        for (let i = 0; i < message.sourceUuids.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sourceUuids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetSourcesByUuidsParams
 */
export const GetSourcesByUuidsParams = new GetSourcesByUuidsParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSourcesBySlugParams$Type extends MessageType<GetSourcesBySlugParams> {
    constructor() {
        super("news.GetSourcesBySlugParams", [
            { no: 1, name: "slugs", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSourcesBySlugParams>): GetSourcesBySlugParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.slugs = "";
        if (value !== undefined)
            reflectionMergePartial<GetSourcesBySlugParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSourcesBySlugParams): GetSourcesBySlugParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string slugs */ 1:
                    message.slugs = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSourcesBySlugParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string slugs = 1; */
        if (message.slugs !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.slugs);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetSourcesBySlugParams
 */
export const GetSourcesBySlugParams = new GetSourcesBySlugParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSourcesResponse$Type extends MessageType<GetSourcesResponse> {
    constructor() {
        super("news.GetSourcesResponse", [
            { no: 1, name: "sources", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Source }
        ]);
    }
    create(value?: PartialMessage<GetSourcesResponse>): GetSourcesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sources = [];
        if (value !== undefined)
            reflectionMergePartial<GetSourcesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSourcesResponse): GetSourcesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated news.Source sources */ 1:
                    message.sources.push(Source.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSourcesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated news.Source sources = 1; */
        for (let i = 0; i < message.sources.length; i++)
            Source.internalBinaryWrite(message.sources[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetSourcesResponse
 */
export const GetSourcesResponse = new GetSourcesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSourcesByCategoryParams$Type extends MessageType<GetSourcesByCategoryParams> {
    constructor() {
        super("news.GetSourcesByCategoryParams", [
            { no: 1, name: "category_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSourcesByCategoryParams>): GetSourcesByCategoryParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categoryId = 0;
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<GetSourcesByCategoryParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSourcesByCategoryParams): GetSourcesByCategoryParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 category_id */ 1:
                    message.categoryId = reader.int32();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 3:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSourcesByCategoryParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 category_id = 1; */
        if (message.categoryId !== 0)
            writer.tag(1, WireType.Varint).int32(message.categoryId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetSourcesByCategoryParams
 */
export const GetSourcesByCategoryParams = new GetSourcesByCategoryParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSourcesByCategoryResponse$Type extends MessageType<GetSourcesByCategoryResponse> {
    constructor() {
        super("news.GetSourcesByCategoryResponse", [
            { no: 1, name: "sources", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetSourcesByCategoryResponse>): GetSourcesByCategoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.sources = [];
        message.total = 0;
        if (value !== undefined)
            reflectionMergePartial<GetSourcesByCategoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSourcesByCategoryResponse): GetSourcesByCategoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bytes sources */ 1:
                    message.sources.push(reader.bytes());
                    break;
                case /* int32 total */ 2:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSourcesByCategoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bytes sources = 1; */
        for (let i = 0; i < message.sources.length; i++)
            writer.tag(1, WireType.LengthDelimited).bytes(message.sources[i]);
        /* int32 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetSourcesByCategoryResponse
 */
export const GetSourcesByCategoryResponse = new GetSourcesByCategoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticlesByUuidsParams$Type extends MessageType<GetArticlesByUuidsParams> {
    constructor() {
        super("news.GetArticlesByUuidsParams", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "uuids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticlesByUuidsParams>): GetArticlesByUuidsParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        message.uuids = [];
        if (value !== undefined)
            reflectionMergePartial<GetArticlesByUuidsParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticlesByUuidsParams): GetArticlesByUuidsParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                case /* repeated bytes uuids */ 2:
                    message.uuids.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticlesByUuidsParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        /* repeated bytes uuids = 2; */
        for (let i = 0; i < message.uuids.length; i++)
            writer.tag(2, WireType.LengthDelimited).bytes(message.uuids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetArticlesByUuidsParams
 */
export const GetArticlesByUuidsParams = new GetArticlesByUuidsParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticlesByFilterParams$Type extends MessageType<GetArticlesByFilterParams> {
    constructor() {
        super("news.GetArticlesByFilterParams", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "filter_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "order", kind: "enum", opt: true, T: () => ["news.Sort", Sort] },
            { no: 4, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticlesByFilterParams>): GetArticlesByFilterParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        message.filterUuid = new Uint8Array(0);
        message.offset = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetArticlesByFilterParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticlesByFilterParams): GetArticlesByFilterParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                case /* bytes filter_uuid */ 2:
                    message.filterUuid = reader.bytes();
                    break;
                case /* optional news.Sort order */ 3:
                    message.order = reader.int32();
                    break;
                case /* int32 offset */ 4:
                    message.offset = reader.int32();
                    break;
                case /* int32 limit */ 5:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticlesByFilterParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        /* bytes filter_uuid = 2; */
        if (message.filterUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.filterUuid);
        /* optional news.Sort order = 3; */
        if (message.order !== undefined)
            writer.tag(3, WireType.Varint).int32(message.order);
        /* int32 offset = 4; */
        if (message.offset !== 0)
            writer.tag(4, WireType.Varint).int32(message.offset);
        /* int32 limit = 5; */
        if (message.limit !== 0)
            writer.tag(5, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetArticlesByFilterParams
 */
export const GetArticlesByFilterParams = new GetArticlesByFilterParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticlesBySourceParams$Type extends MessageType<GetArticlesBySourceParams> {
    constructor() {
        super("news.GetArticlesBySourceParams", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "source_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "order", kind: "enum", opt: true, T: () => ["news.Sort", Sort] },
            { no: 4, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticlesBySourceParams>): GetArticlesBySourceParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        message.sourceUuid = new Uint8Array(0);
        message.offset = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetArticlesBySourceParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticlesBySourceParams): GetArticlesBySourceParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                case /* bytes source_uuid */ 2:
                    message.sourceUuid = reader.bytes();
                    break;
                case /* optional news.Sort order */ 3:
                    message.order = reader.int32();
                    break;
                case /* int32 offset */ 4:
                    message.offset = reader.int32();
                    break;
                case /* int32 limit */ 5:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticlesBySourceParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        /* bytes source_uuid = 2; */
        if (message.sourceUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.sourceUuid);
        /* optional news.Sort order = 3; */
        if (message.order !== undefined)
            writer.tag(3, WireType.Varint).int32(message.order);
        /* int32 offset = 4; */
        if (message.offset !== 0)
            writer.tag(4, WireType.Varint).int32(message.offset);
        /* int32 limit = 5; */
        if (message.limit !== 0)
            writer.tag(5, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetArticlesBySourceParams
 */
export const GetArticlesBySourceParams = new GetArticlesBySourceParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticlesByCategoryParams$Type extends MessageType<GetArticlesByCategoryParams> {
    constructor() {
        super("news.GetArticlesByCategoryParams", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "category_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "order", kind: "enum", opt: true, T: () => ["news.Sort", Sort] },
            { no: 4, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticlesByCategoryParams>): GetArticlesByCategoryParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        message.categoryId = 0;
        message.offset = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetArticlesByCategoryParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticlesByCategoryParams): GetArticlesByCategoryParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                case /* int32 category_id */ 2:
                    message.categoryId = reader.int32();
                    break;
                case /* optional news.Sort order */ 3:
                    message.order = reader.int32();
                    break;
                case /* int32 offset */ 4:
                    message.offset = reader.int32();
                    break;
                case /* int32 limit */ 5:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticlesByCategoryParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        /* int32 category_id = 2; */
        if (message.categoryId !== 0)
            writer.tag(2, WireType.Varint).int32(message.categoryId);
        /* optional news.Sort order = 3; */
        if (message.order !== undefined)
            writer.tag(3, WireType.Varint).int32(message.order);
        /* int32 offset = 4; */
        if (message.offset !== 0)
            writer.tag(4, WireType.Varint).int32(message.offset);
        /* int32 limit = 5; */
        if (message.limit !== 0)
            writer.tag(5, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetArticlesByCategoryParams
 */
export const GetArticlesByCategoryParams = new GetArticlesByCategoryParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticlesShortResponse$Type extends MessageType<GetArticlesShortResponse> {
    constructor() {
        super("news.GetArticlesShortResponse", [
            { no: 1, name: "articles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ArticleShort },
            { no: 2, name: "total", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticlesShortResponse>): GetArticlesShortResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.articles = [];
        message.total = 0;
        if (value !== undefined)
            reflectionMergePartial<GetArticlesShortResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticlesShortResponse): GetArticlesShortResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated news.ArticleShort articles */ 1:
                    message.articles.push(ArticleShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 total */ 2:
                    message.total = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticlesShortResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated news.ArticleShort articles = 1; */
        for (let i = 0; i < message.articles.length; i++)
            ArticleShort.internalBinaryWrite(message.articles[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 total = 2; */
        if (message.total !== 0)
            writer.tag(2, WireType.Varint).int32(message.total);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetArticlesShortResponse
 */
export const GetArticlesShortResponse = new GetArticlesShortResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchSourceParams$Type extends MessageType<SearchSourceParams> {
    constructor() {
        super("news.SearchSourceParams", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchSourceParams>): SearchSourceParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<SearchSourceParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchSourceParams): SearchSourceParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchSourceParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.SearchSourceParams
 */
export const SearchSourceParams = new SearchSourceParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetArticle$Type extends MessageType<GetArticle> {
    constructor() {
        super("news.GetArticle", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetArticle>): GetArticle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        message.uuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetArticle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetArticle): GetArticle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                case /* bytes uuid */ 2:
                    message.uuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetArticle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        /* bytes uuid = 2; */
        if (message.uuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.uuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetArticle
 */
export const GetArticle = new GetArticle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCategoryI10n$Type extends MessageType<GetCategoryI10n> {
    constructor() {
        super("news.GetCategoryI10n", [
            { no: 1, name: "lang", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "data", kind: "message", T: () => CategoryData }
        ]);
    }
    create(value?: PartialMessage<GetCategoryI10n>): GetCategoryI10n {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.lang = 0;
        if (value !== undefined)
            reflectionMergePartial<GetCategoryI10n>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCategoryI10n): GetCategoryI10n {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 lang */ 1:
                    message.lang = reader.int32();
                    break;
                case /* news.CategoryData data */ 2:
                    message.data = CategoryData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCategoryI10n, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 lang = 1; */
        if (message.lang !== 0)
            writer.tag(1, WireType.Varint).int32(message.lang);
        /* news.CategoryData data = 2; */
        if (message.data)
            CategoryData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetCategoryI10n
 */
export const GetCategoryI10n = new GetCategoryI10n$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActionArticle$Type extends MessageType<ActionArticle> {
    constructor() {
        super("news.ActionArticle", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "article_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<ActionArticle>): ActionArticle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.articleUuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<ActionArticle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionArticle): ActionArticle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* bytes article_uuid */ 2:
                    message.articleUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActionArticle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* bytes article_uuid = 2; */
        if (message.articleUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.articleUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.ActionArticle
 */
export const ActionArticle = new ActionArticle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertImageUUID$Type extends MessageType<UpsertImageUUID> {
    constructor() {
        super("news.UpsertImageUUID", [
            { no: 1, name: "article_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "image_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UpsertImageUUID>): UpsertImageUUID {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.articleUuid = new Uint8Array(0);
        message.imageUuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UpsertImageUUID>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertImageUUID): UpsertImageUUID {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes article_uuid */ 1:
                    message.articleUuid = reader.bytes();
                    break;
                case /* bytes image_uuid */ 2:
                    message.imageUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertImageUUID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes article_uuid = 1; */
        if (message.articleUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.articleUuid);
        /* bytes image_uuid = 2; */
        if (message.imageUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.imageUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.UpsertImageUUID
 */
export const UpsertImageUUID = new UpsertImageUUID$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("news.Filter", [
            { no: 1, name: "uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "publish_order", kind: "enum", T: () => ["news.Sort", Sort] },
            { no: 4, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SourceCategory }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uuid = new Uint8Array(0);
        message.name = "";
        message.publishOrder = 0;
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes uuid */ 1:
                    message.uuid = reader.bytes();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* news.Sort publish_order */ 3:
                    message.publishOrder = reader.int32();
                    break;
                case /* repeated news.SourceCategory items */ 4:
                    message.items.push(SourceCategory.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes uuid = 1; */
        if (message.uuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.uuid);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* news.Sort publish_order = 3; */
        if (message.publishOrder !== 0)
            writer.tag(3, WireType.Varint).int32(message.publishOrder);
        /* repeated news.SourceCategory items = 4; */
        for (let i = 0; i < message.items.length; i++)
            SourceCategory.internalBinaryWrite(message.items[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFilterParams$Type extends MessageType<CreateFilterParams> {
    constructor() {
        super("news.CreateFilterParams", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "order", kind: "enum", opt: true, T: () => ["news.Sort", Sort] },
            { no: 4, name: "items", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => NewSourceCategory }
        ]);
    }
    create(value?: PartialMessage<CreateFilterParams>): CreateFilterParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<CreateFilterParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFilterParams): CreateFilterParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional news.Sort order */ 3:
                    message.order = reader.int32();
                    break;
                case /* repeated news.NewSourceCategory items */ 4:
                    message.items.push(NewSourceCategory.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFilterParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional news.Sort order = 3; */
        if (message.order !== undefined)
            writer.tag(3, WireType.Varint).int32(message.order);
        /* repeated news.NewSourceCategory items = 4; */
        for (let i = 0; i < message.items.length; i++)
            NewSourceCategory.internalBinaryWrite(message.items[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CreateFilterParams
 */
export const CreateFilterParams = new CreateFilterParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateFilterFromCategoriesParams$Type extends MessageType<CreateFilterFromCategoriesParams> {
    constructor() {
        super("news.CreateFilterFromCategoriesParams", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "order", kind: "enum", opt: true, T: () => ["news.Sort", Sort] },
            { no: 4, name: "categories", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateFilterFromCategoriesParams>): CreateFilterFromCategoriesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.categories = [];
        if (value !== undefined)
            reflectionMergePartial<CreateFilterFromCategoriesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateFilterFromCategoriesParams): CreateFilterFromCategoriesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* optional string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional news.Sort order */ 3:
                    message.order = reader.int32();
                    break;
                case /* repeated int32 categories */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.categories.push(reader.int32());
                    else
                        message.categories.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateFilterFromCategoriesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* optional string name = 2; */
        if (message.name !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional news.Sort order = 3; */
        if (message.order !== undefined)
            writer.tag(3, WireType.Varint).int32(message.order);
        /* repeated int32 categories = 4; */
        if (message.categories.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.categories.length; i++)
                writer.int32(message.categories[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.CreateFilterFromCategoriesParams
 */
export const CreateFilterFromCategoriesParams = new CreateFilterFromCategoriesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFiltersParams$Type extends MessageType<GetFiltersParams> {
    constructor() {
        super("news.GetFiltersParams", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetFiltersParams>): GetFiltersParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<GetFiltersParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFiltersParams): GetFiltersParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFiltersParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetFiltersParams
 */
export const GetFiltersParams = new GetFiltersParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFiltersResponse$Type extends MessageType<GetFiltersResponse> {
    constructor() {
        super("news.GetFiltersResponse", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "filters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Filter }
        ]);
    }
    create(value?: PartialMessage<GetFiltersResponse>): GetFiltersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<GetFiltersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFiltersResponse): GetFiltersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* repeated news.Filter filters */ 2:
                    message.filters.push(Filter.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFiltersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* repeated news.Filter filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            Filter.internalBinaryWrite(message.filters[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetFiltersResponse
 */
export const GetFiltersResponse = new GetFiltersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFiltersShortResponse$Type extends MessageType<GetFiltersShortResponse> {
    constructor() {
        super("news.GetFiltersShortResponse", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "filters", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<GetFiltersShortResponse>): GetFiltersShortResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.filters = [];
        if (value !== undefined)
            reflectionMergePartial<GetFiltersShortResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFiltersShortResponse): GetFiltersShortResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* repeated bytes filters */ 2:
                    message.filters.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFiltersShortResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* repeated bytes filters = 2; */
        for (let i = 0; i < message.filters.length; i++)
            writer.tag(2, WireType.LengthDelimited).bytes(message.filters[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.GetFiltersShortResponse
 */
export const GetFiltersShortResponse = new GetFiltersShortResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFilterParams$Type extends MessageType<UpdateFilterParams> {
    constructor() {
        super("news.UpdateFilterParams", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "filter_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "order", kind: "enum", opt: true, T: () => ["news.Sort", Sort] }
        ]);
    }
    create(value?: PartialMessage<UpdateFilterParams>): UpdateFilterParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.filterUuid = new Uint8Array(0);
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateFilterParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFilterParams): UpdateFilterParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* bytes filter_uuid */ 2:
                    message.filterUuid = reader.bytes();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional news.Sort order */ 4:
                    message.order = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFilterParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* bytes filter_uuid = 2; */
        if (message.filterUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.filterUuid);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional news.Sort order = 4; */
        if (message.order !== undefined)
            writer.tag(4, WireType.Varint).int32(message.order);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.UpdateFilterParams
 */
export const UpdateFilterParams = new UpdateFilterParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateFilterSourcesParams$Type extends MessageType<UpdateFilterSourcesParams> {
    constructor() {
        super("news.UpdateFilterSourcesParams", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "filter_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "add_filter_sources", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "remove_filter_sources", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateFilterSourcesParams>): UpdateFilterSourcesParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.filterUuid = new Uint8Array(0);
        message.addFilterSources = [];
        message.removeFilterSources = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateFilterSourcesParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateFilterSourcesParams): UpdateFilterSourcesParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* bytes filter_uuid */ 2:
                    message.filterUuid = reader.bytes();
                    break;
                case /* repeated bytes add_filter_sources */ 3:
                    message.addFilterSources.push(reader.bytes());
                    break;
                case /* repeated bytes remove_filter_sources */ 4:
                    message.removeFilterSources.push(reader.bytes());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateFilterSourcesParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* bytes filter_uuid = 2; */
        if (message.filterUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.filterUuid);
        /* repeated bytes add_filter_sources = 3; */
        for (let i = 0; i < message.addFilterSources.length; i++)
            writer.tag(3, WireType.LengthDelimited).bytes(message.addFilterSources[i]);
        /* repeated bytes remove_filter_sources = 4; */
        for (let i = 0; i < message.removeFilterSources.length; i++)
            writer.tag(4, WireType.LengthDelimited).bytes(message.removeFilterSources[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.UpdateFilterSourcesParams
 */
export const UpdateFilterSourcesParams = new UpdateFilterSourcesParams$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveFilterParams$Type extends MessageType<RemoveFilterParams> {
    constructor() {
        super("news.RemoveFilterParams", [
            { no: 1, name: "account_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "filter_uuid", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveFilterParams>): RemoveFilterParams {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountUuid = new Uint8Array(0);
        message.filterUuid = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RemoveFilterParams>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveFilterParams): RemoveFilterParams {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes account_uuid */ 1:
                    message.accountUuid = reader.bytes();
                    break;
                case /* bytes filter_uuid */ 2:
                    message.filterUuid = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveFilterParams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes account_uuid = 1; */
        if (message.accountUuid.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.accountUuid);
        /* bytes filter_uuid = 2; */
        if (message.filterUuid.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.filterUuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message news.RemoveFilterParams
 */
export const RemoveFilterParams = new RemoveFilterParams$Type();
/**
 * @generated ServiceType for protobuf service news.News
 */
export const News = new ServiceType("news.News", [
    { name: "GetFilters", options: {}, I: GetFiltersParams, O: GetFiltersResponse },
    { name: "GetFiltersShort", options: {}, I: GetFiltersParams, O: GetFiltersShortResponse },
    { name: "GetArticlesByFilter", options: {}, I: GetArticlesByFilterParams, O: GetArticlesShortResponse },
    { name: "CreateFilter", options: {}, I: CreateFilterParams, O: Filter },
    { name: "CreateFilterFromCategories", options: {}, I: CreateFilterFromCategoriesParams, O: Filter },
    { name: "UpdateFilter", options: {}, I: UpdateFilterParams, O: Empty },
    { name: "UpdateFilterSources", options: {}, I: UpdateFilterSourcesParams, O: Empty },
    { name: "RemoveFilter", options: {}, I: RemoveFilterParams, O: Empty }
]);
