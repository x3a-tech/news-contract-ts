// @generated by protobuf-ts 2.9.6
// @generated from protobuf file "categorize/categorize.proto" (package "categorize", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Categorize } from "./categorize";
import type { UpsertArticlesRequest } from "./categorize";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "../google/protobuf/empty";
import type { Article } from "./categorize";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service categorize.Categorize
 */
export interface ICategorizeClient {
    /**
     * @generated from protobuf rpc: UpsertArticle(categorize.Article) returns (google.protobuf.Empty);
     */
    upsertArticle(input: Article, options?: RpcOptions): UnaryCall<Article, Empty>;
    /**
     * @generated from protobuf rpc: UpsertArticles(categorize.UpsertArticlesRequest) returns (google.protobuf.Empty);
     */
    upsertArticles(input: UpsertArticlesRequest, options?: RpcOptions): UnaryCall<UpsertArticlesRequest, Empty>;
}
/**
 * @generated from protobuf service categorize.Categorize
 */
export class CategorizeClient implements ICategorizeClient, ServiceInfo {
    typeName = Categorize.typeName;
    methods = Categorize.methods;
    options = Categorize.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: UpsertArticle(categorize.Article) returns (google.protobuf.Empty);
     */
    upsertArticle(input: Article, options?: RpcOptions): UnaryCall<Article, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<Article, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertArticles(categorize.UpsertArticlesRequest) returns (google.protobuf.Empty);
     */
    upsertArticles(input: UpsertArticlesRequest, options?: RpcOptions): UnaryCall<UpsertArticlesRequest, Empty> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertArticlesRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
